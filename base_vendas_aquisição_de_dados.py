# -*- coding: utf-8 -*-
"""001_AQUISIÇÃO-DE-DADOS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1esAjrFpIQ7w402B2hlWc_fhxa2lYIx24

# **AQUISIÇÃO DE DADOS**
"""

# AQUISIÇÃO DE DADOS - POR ONDE COMEÇAR?

"""
  Metodologia crisp - dm

    Primeiros passos:
    - Começar com uma pergunta de negócios
    - Pesquisa, discussão, documentação > parte técnica
    - Aquisição de dados: conectar na fonte de dados para retornar
    os dados e analisá-los.
    - Análise exploratória: identificar problemas
    - DataPrep: solucionar problemas
    - índice turn-over

    Delimitadores:
    - Padrão: vírgula [,]
    Caso o delimitador do arquivo seja diferente, é necessário
    utilizar o sep='' ou delimiter=''
    - Ponto e vírgula [;]
    - Tab [\t]

    Aquisição de dados:
    - Importar a biblioteca Pandas
    - Subir arquivos
    - Definir DataFrame (df): estrutura tabular com linhas e colunas

    Análise descritiva e análise diagnóstica: menos complexidade, pouco
    valor na empresa, porém com mais oportunidades de ingressar na área.

    Análise preditiva e prescritiva: entende o passado para lidar com o
    futuro através da estatística, maior complexidade e mais valor na
    empresa.
"""

print("Meu primeiro código em Python.")

# carregando dados com python utilizando a biblioteca pandas
import pandas as pd

# arquivos CSV - delimitador vírgula [,]
# adicionar ponto [.] após o pd para abrir as funções da biblioteca
# por padrão, ele vai buscar a vírgula como delimitador
# read(): função para dar carga nos arquivos
# pd.read() retorna um DataFrame (df), que possui estrutura tabular com linhas e colunas (Excel)
# variável df: guardar as informações na memória

df = pd.read_csv('base_vendas.csv')

# abrir as 5 primeiras linhas da tabela - índice [0]
df.head()

# abrir a quantidade de linhas que estiver dentro dos parênteses
df.head(50)

# abrir as 5 últimas linhas da tabela
df.tail()

# arquivos CSV - delimitador ponto e vírgula [;]
df = pd.read_csv('base_vendas_ponto_virgula.csv', sep=';')

# -1: retorna as cinco primeiras linhas e as cinco últimas da tabela
df.head(-1)

# # arquivos CSV/TSV - delimitador tabulação [\t]
# as colunas não foram separadas corretamente por conta do ponto e vírgula
# um arquivo tabulado não existe na função read(), é necessário usar a mesma função de um arquivo CSV

df = pd.read_csv('base_vendas_tab.tsv', sep='\t')
df.head(-1)

# BIBLIOTECA PANDAS

"""
    O Pandas é uma biblioteca para manipulação, análise e visualização dos dados.
    Foi desenvolvida com base no Numpy e Matplotlib.

    Site oficial: https://pandas.pydata.org
"""

import pandas as pd

# arquivos Excel
# biblioteca openpyxl
# !pib install: instalar bibliotecas

!pib install openpyxl

# carga de diferentes planilhas que estão no mesmo arquivo

df_funcionarios = pd.read_excel('Vendas.xlsx', sheet_name='funcionarios')
df_vendas = pd.read_excel('Vendas.xlsx', sheet_name='base_vendas')

df_funcionarios.head()
df_vendas.head()

# sheet_name: paramêtro para abrir outra planilha dentro de um mesmo arquivo

df = pd.read_excel('Vendas.xlsx', sheet_name='base_vendas')
df.head()

# arquivos HTML
# busca por uma estrutura tabular
# retorna uma lista (list) no qual os elementos são DataFrames das tabelas HTML separadas pelas tags <table></table>

tabelas = pd.read_html('base_vendas.html')
tabelas

# verifica o tipo do objeto - list
type(tabelas)

# imprime a primeira tabela, toda lista começa do índice [0]

df = tabelas[0]
df.head()

# arquivos H5
# armazenar big data - leitura de computador 0 e 1

df = pd.read_hdf('base_vendas.h5')
df.head()

# arquivos JSON

df = pd.read_json('base_vendas.json')
df.head()

# arquivos XML
# semi estruturado

df = pd.read_xml('base_vendas.xml')
df.head()

# dados de um banco de dados (DB)
# conexão - usuário/senha
# biblioteca SQL

import sqlite3 as sql
conexao = sql.connect('vendas.db')

df = pd.read_sql_query('SELECT * FROM pedidos', conexao)
df.head()
